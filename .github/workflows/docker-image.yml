name: Docker Image CI

on:
  push:
    branches: [ "main" ]

  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write
  id-token: write

env:
  # REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:

  build:
    if: github.event_name == 'pull_request'

    runs-on: ubuntu-latest

    outputs:
      image-tag: ${{ steps.prepare-image-tag.outputs.short-sha }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2.1.0
        with:
          platforms: all

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        id: ghcr_login
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/${{ env.IMAGE_NAME }}
          flavor: |
            latest=true
          tags: |
            type=sha

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v3.2.0
        with:
          context: backstage-demo
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Prepera the image tag
        id: prepare-image-tag
        run: |
          shortSha=$(echo ${{ github.sha }} | cut -c1-7)
          echo "short-sha=sha-${shortSha}" >> $GITHUB_OUTPUT

  deploy:

    if: github.event_name != 'pull_request'

    runs-on: ubuntu-latest
    # needs: build

    # env:
      # AWS_WEB_IDENTITY_TOKEN_FILE: /var/run/secrets/eks.amazonaws.com/serviceaccount/token
      # AWS_ROLE_ARN: arn:aws:iam::775254019113:role/github-role
      # AWS_REGION: eu-central-1
      # AWS_DEFAULT_REGION: eu-central-1
      # AWS_ROLE_SESSION_NAME: githubrolesession

    steps:
      - uses: actions/checkout@v3

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
          terraform_version: 1.3.7
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          # role-skip-session-tagging: true
          role-to-assume: arn:aws:iam::775254019113:role/github-role
          audience: sts.amazonaws.com
          role-session-name: githubactions
          # role-session-name: ${{ env.AWS_ROLE_SESSION_NAME }}
          # role-session-name: githubrolesession
          aws-region: eu-central-1
          # web-identity-token-file: ${{ env.AWS_WEB_IDENTITY_TOKEN_FILE }}
          # web-identity-token-file: /tmp/web_identity_token_file
          # role-duration-seconds: 900

      - run: |
          aws sts get-caller-identity
          aws s3 ls

      - name: Terraform Init
        id: init
        working-directory: terraform
        run: terraform init

      - name: Terraform Plan
        id: plan
        working-directory: terraform
        run: |
          terraform plan -no-color
        env:
          TF_VAR_aws_access_key: ${{ env.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_aws_session_token: ${{ env.AWS_SESSION_TOKEN }}
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
          TF_LOG: TRACE

      # - name: Echo Image Tag
      #   run: echo ${{ needs.build.outputs.image-tag }}
